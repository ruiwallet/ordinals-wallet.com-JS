(function() {
    'use strict';
    //------------------------------------------------------------
    //2025-09-17
    //用于监控ordinalswallet.com(简称:OW)网站的NAT实时卖一价格,当卖一价格小于或等于设定价时,警报响起

    // 定义目标价格
    var targetPrice = 0.000001;

    // 检查并显示警告的函数
    function checkPriceAndWarn() {
        const url = window.location.href;

        // 确保在正确的页面执行
        if (url.includes('https://ordinalswallet.com/collection/tap-DMT-NAT')) {
            console.log("正在监控 'tap-DMT-NAT' 系列的价格...");

            // 寻找包含价格的元素
            // 这可能需要根据网页的实际HTML结构进行调整
            // 假设价格信息通常在包含“price”或“listing”关键字的元素中
            // 我们可以尝试查找特定的类名或标签
            // 这里是一个假设的查找方式，可能需要根据实际HTML进行修改
            const priceElement = document.querySelector('.flex.items-center.justify-end'); // 假设最低价格的元素有这个类名
            // 或者：
            // const priceElement = document.querySelector('div.price-display-class span.price-value');
            // 你可能需要打开开发者工具 (F12) 检查价格元素的精确选择器

            if (priceElement) {

               //添加一个表格和文本框，监控信息
               Addctl();

                // 假设价格文本包含货币符号，需要提取数字部分
                const priceText = priceElement.textContent;
                // 移除所有非数字和非小数点字符，然后转换为浮点数
                const currentPrice = parseFloat(priceText.replace(/[^\d.]/g, ''));

                if (!isNaN(currentPrice)) {
                    console.log(`当前最低卖出价: ${currentPrice}`);
                    //console.log(`当前设定价: ${targetPrice}`);
                   const now = new Date(); // 获取当前时间
                   const timeString = now.toLocaleTimeString(); // 转换为本地时间字符串
                   document.title = currentPrice + ' Time:'+timeString;

                    if (currentPrice <= targetPrice) {
                        const message = `警告：当前最低卖出价 ${currentPrice} BTC 小于或等于 ${targetPrice} BTC！`;
                        //alert(message); // 弹出警告框
                        //console.warn(message); // 在控制台也显示警告

                       //硬编码使用远程它网语音star----------------------------------------
                       //2025-09-17
                       var audio = new Audio('http://img02.tuke88.com/newpreview_music/08/99/01/5c88d6fca151876808.mp3');
                       audio.addEventListener('error', function() {
                          console.error('音乐加载错误.');
                       });
                      audio.play();
                      document.getElementById('infoTextBox').value = '速度买入...当前价: '+currentPrice;
                      //硬编码使用远程它网语音end----------------------------------------- 

                      

                    } else {
                        console.log(`当前价格 ${currentPrice} BTC 高于 ${targetPrice} BTC，无需警告。`);
                        document.getElementById('infoTextBox').value = '价格监控运行中...';
                    }
                } else {
                    console.error('无法解析价格文本:', priceText);
                }
            } else {
                console.warn('未找到最低卖出价格元素。请检查选择器是否正确。');
                // 尝试查找其他可能包含价格的元素，例如：
                 const potentialPriceElements = document.querySelectorAll('div, span, p');
                 potentialPriceElements.forEach(el => {
                     if (el.textContent.includes('BTC') && el.textContent.match(/\d+\.\d+/)) {
                         console.log('可能的价格元素:', el.textContent, el);
                     }
                 });
            }
        } else {
            console.log("不在目标页面上，脚本未执行。");
        }
    }

    // 设置一个定时器，每隔一段时间检查一次价格
    // 例如，每5秒检查一次
    const checkInterval = setInterval(checkPriceAndWarn, 5000);

    // 如果需要，你也可以在页面加载完成后立即执行一次
    checkPriceAndWarn();


    //添加控制控件，2025-09-17
   function Addctl() {
      // 获取目标DIV元素
      var targetDiv = document.querySelector('.flex-shrink-0.border-b');

     //查找条件值文本框是否存
     // 指定要查找的文本框的ID或类名
     const targetId = 'tjTextBox'; 
 
     // 查找指定的文本框
     const textBox = document.getElementById(targetId);
 
     // 如果找不到指定的文本框，则添加一个新的
     if (!textBox) {
         targetDiv.innerHTML = '';
          // 创建一个新的文本框
         const newTextBox = document.createElement('input');
         newTextBox.type = 'text';
         newTextBox.value = '0.000036'; // 设置值为0.0000036
         newTextBox.id = targetId; // 确保新添加的文本框有相同的ID，或者你可以使用其他方式定位它
         newTextBox.style.color = 'black'; //设置文字颜色为黑色
         newTextBox.style.textAlign = 'right'; //右对齐
 
         // 将新文本框添加到特定的父元素中
         targetDiv.appendChild(newTextBox);
     } else {
         // 如果已存在，可以设置其值（如果需要）
         //textBox.value = '0.000036'; // 确保这是你想要设置的初始值
     }


    // 定义要查找的按钮ID的选择器---------------------------------
      const starBtnId = 'starButton';
 
      // 查找按钮
      const staringButton = document.getElementById(starBtnId);
 
      // 检查按钮是否存在
      if (!staringButton) {
          // 创建一个新的按钮元素
          const newButton = document.createElement('button');
          newButton.textContent = '开始'; // 设置按钮的文本内容
          newButton.id = starBtnId; // 设置按钮的ID，以便可以再次定位它（如果需要）
          newButton.style.margin = '10px'; // 设置一些样式（可选）
          newButton.style.padding = '10px'; // 设置一些样式（可选）
         //添加按钮事件
         newButton.addEventListener('click', function() {
             targetPrice =  parseFloat(document.getElementById('tjTextBox').value);
             document.getElementById('infoTextBox').value = '价格监控运行中...';
         });
          // 将新按钮添加到父
          targetDiv.appendChild(newButton);
      }

      // 定义要查找的按钮ID的选择器-------------------------------
      const exitBtnId = 'exitButton';
 
      // 查找按钮
      const existingButton = document.getElementById(exitBtnId);
 
      // 检查按钮是否存在
      if (!existingButton) {
          // 创建一个新的按钮元素
          const newButton = document.createElement('button');
          newButton.textContent = '停止'; // 设置按钮的文本内容
          newButton.id = exitBtnId; // 设置按钮的ID，以便可以再次定位它（如果需要）
          newButton.style.margin = '10px'; // 设置一些样式（可选）
          newButton.style.padding = '10px'; // 设置一些样式（可选）
         //添加按钮事件
         newButton.addEventListener('click', function() {
             clearInterval(window.ordinalPriceCheckerInterval);
              document.getElementById('infoTextBox').value = '监控已停止...';
         });
          // 将新按钮添加到父
          targetDiv.appendChild(newButton);
      }
 
      // 指定要查找的文本框的ID或类名
      const infoBoxId = 'infoTextBox'; 
      // 查找指定的文本框
      const infoBox = document.getElementById(infoBoxId);
      // 如果找不到指定的文本框，则添加一个新的
      if (!infoBox) {
         // 创建一个新的文本框
         const infoTextBox = document.createElement('input');
         infoTextBox.type = 'text';
         infoTextBox.value = '价格监控运行中...';
         infoTextBox.id = infoBoxId; // 确保新添加的文本框有相同的ID，或者你可以使用其他方式定位它
         infoTextBox.style.color = 'black'; //设置文字颜色为黑色
         infoTextBox.style.textAlign = 'right'; //右对齐
         // 将新文本框添加到特定的父元素中
         targetDiv.appendChild(infoTextBox);
      }      
      
    }

    // 在控制台提供一个停止脚本的方法
    console.log(`脚本已启动，每 ${5000 / 1000} 秒检查一次价格。`);
    console.log("在控制台输入 'clearInterval(window.ordinalPriceCheckerInterval)' 可以停止脚本。");
    window.ordinalPriceCheckerInterval = checkInterval; // 将interval ID暴露在window对象上，方便停止

})();